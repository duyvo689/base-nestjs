generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum active {
  ACTIVE
  INACTIVE
  DELETE
  PENDING
}

enum actionFunctionLog {
  READ
  UPDATE
  CREATE
  DELETE
}

enum functionNameLog {
  USER
  ORDER
}

enum bookingStatus {
  NO_SHOW
  CHECK_IN
  UNDER_TREATMENT
  LEFT
}

enum categoryTag {
  BEAUTY
  DENTAL
  CADEMY
  GIFT
  OTHER
}

enum serviceTag {
  SERVICE
  PRODUCT
  GIFT
}

enum lockStatus {
  LOCK
  ONGOING
}

enum orderActiveStatus {
  CANCEL
  DONE
  PROCESSING
}

enum orderPaymentStatus {
  PAID
  UNPAID
  PARTIAL
}

enum bookingType {
  TREATMENT
  ADVICE
}

enum genderType {
  MALE
  FEMALE
  OTHER
}

model users {
  id                String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  customId          String       @unique
  email             String?      @unique
  name              String
  phone             String?      @unique
  phone2            String?
  avatar            String?
  rankId            String       @db.Uuid
  creatorId         String?      @db.Uuid
  active            active       @default(ACTIVE)
  zaloId            String?
  customerResources String?      @db.Uuid
  address           String?
  facebookLink      String?
  zaloLink          String?
  instagramLink     String?
  birthday          DateTime?    @db.Date
  gender            genderType?
  points            Int          @default(0)
  clinicId          String?      @db.Uuid
  city              String?
  sellerOnlineId    String?      @db.Uuid
  notes    String?     
  createdAt         DateTime     @default(now()) @db.Timestamptz(6)
  rank              ranks        @relation(fields: [rankId], references: [id])
  clinic            clinics?     @relation(fields: [clinicId], references: [id])
  creator           staffs?      @relation(fields: [creatorId], references: [id], name: "creatorUsers")
  sellerOnline      staffs?      @relation(fields: [sellerOnlineId], references: [id], name: "sellerOnlineUsers")
  orderItems        orderItems[] @relation(name: "userOrderItems")
  bills             bills[]      @relation(name: "userBill")
}

model ranks {
  id            String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt     DateTime @default(now()) @db.Timestamptz(6)
  active        active   @default(ACTIVE)
  expenseAmount Int
  convertPoints Int
  description   String?
  maxPoints     Int
  minPoints     Int
  name          String
  hexColor      String?
  users         users[]
}

model staffs {
  id             String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  customId       String?   @unique
  email          String?   @unique
  name           String
  phone          String?   @unique
  phone2         String?   @unique
  avatar         String?
  roleId         String?   @db.Uuid
  hashedPassword String?
  birthday       DateTime?
  active         active    @default(PENDING)
  createdAt      DateTime  @default(now()) @db.Timestamptz(6)

  role                   roles?        @relation(fields: [roleId], references: [id])
  staffClinices          staffClinic[]
  creatorUsers           users[]       @relation(name: "creatorUsers")
  sellerOnlineUsers      users[]       @relation(name: "sellerOnlineUsers")
  technicianBooking      bookings[]    @relation(name: "technicianBooking")
  creatorBooking         bookings[]    @relation(name: "creatorBooking")
  doctorBooking          bookings[]    @relation(name: "doctorBooking")
  creatorOrderItem       orderItems[]  @relation(name: "creatorOrderItem")
  sellerOnlineOrderItem  orderItems[]  @relation(name: "sellerOnlineOrderItem")
  sellerOfflineOrderItem orderItems[]  @relation(name: "sellerOfflineOrderItem")
  salesSupportOrderItem  orderItems[]  @relation(name: "salesSupportOrderItem")
  bills                  bills[]       @relation(name: "creatorBill")
}

model permissions {
  id              String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  shortName       String           @unique
  displayName     String
  createdAt       DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  rolePermissions rolePermission[]
}

model pathProjects {
  id               String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  pageName         String
  path             String
  createdAt        DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  rolePermissions  rolePermission[]
  rolePathProjects rolePathProject[]
}

model roles {
  id              String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  displayName     String
  shortName       String
  active          active            @default(ACTIVE)
  createdAt       DateTime          @default(now()) @db.Timestamptz(6)
  staffs          staffs[]
  rolePermission  rolePermission[]
  rolePathProject rolePathProject[]
}

model rolePermission {
  roleId         String        @db.Uuid
  permissionId   String        @db.Uuid
  createdAt      DateTime      @default(now()) @db.Timestamptz(6)
  role           roles         @relation(fields: [roleId], references: [id])
  permission     permissions   @relation(fields: [permissionId], references: [id])
  pathProjects   pathProjects? @relation(fields: [pathProjectsId], references: [id])
  pathProjectsId String?       @db.Uuid

  @@id([roleId, permissionId])
}

model rolePathProject {
  roleId        String       @db.Uuid
  pathProjectId String       @db.Uuid
  createdAt     DateTime     @default(now()) @db.Timestamptz(6)
  role          roles        @relation(fields: [roleId], references: [id])
  pathProject   pathProjects @relation(fields: [pathProjectId], references: [id])

  @@id([roleId, pathProjectId])
}

model staffClinic {
  staffId   String   @db.Uuid
  clinicId  String   @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  clinic    clinics  @relation(fields: [clinicId], references: [id])
  staff     staffs   @relation(fields: [staffId], references: [id])

  @@id([staffId, clinicId])
}

model clinics {
  id                   String                @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                 String
  shortName            String
  address              String?
  hotline              String?
  city                 String?
  latitude             Float?
  longitude            Float?
  avatar               String?
  active               active                @default(ACTIVE)
  createdAt            DateTime              @default(now()) @db.Timestamptz(6)
  staffClinic          staffClinic[]
  couponApplyAtClinics couponApplyAtClinic[]
  serviceApplyClinic   serviceApplyClinic[]
  users                users[]
  bookings             bookings[]
  orderItems           orderItems[]
  bills                bills[]               @relation(name: "clinicBill")
}

model advertises {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name      String
  active    active   @default(ACTIVE)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
}

model marketingTeams {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name      String
  active    active   @default(ACTIVE)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
}

model functionLogs {
  id           Int               @id @default(autoincrement())
  staffId      String            @db.Uuid
  recordId     String            @db.Uuid
  staffName    String
  functionName functionNameLog?
  action       actionFunctionLog
  description  String?
  createdAt    DateTime          @default(now()) @db.Timestamptz(6)
}

model orderItems {
  id                String      @id @unique
  orderId           String?
  userId            String      @db.Uuid
  itemName          String
  serviceId         String?     @db.Uuid
  comboId           String?
  isCombo           Boolean     @default(false)
  isCancel          Boolean     @default(false)
  isLock            Boolean     @default(false)
  price             Int         @default(0)
  discount          Int         @default(0)
  quantity          Int         @default(1)
  completedSessions Int         @default(0)
  customerPaid      Int         @default(0)
  sellerOnlineId    String?     @db.Uuid
  sellerOfflineId   String?     @db.Uuid
  salesSupportId    String?     @db.Uuid
  creatorId         String?     @db.Uuid
  createdAt         DateTime    @default(now()) @db.Timestamptz(6)
  notes             String?
  clinicId          String      @db.Uuid
  service           services?   @relation(fields: [serviceId], references: [id], name: "serviceOrderItem")
  creator           staffs?     @relation(fields: [creatorId], references: [id], name: "creatorOrderItem")
  sellerOnline      staffs?     @relation(fields: [sellerOnlineId], references: [id], name: "sellerOnlineOrderItem")
  sellerOffline     staffs?     @relation(fields: [sellerOfflineId], references: [id], name: "sellerOfflineOrderItem")
  salesSupport      staffs?     @relation(fields: [salesSupportId], references: [id], name: "salesSupportOrderItem")
  user              users?      @relation(fields: [userId], references: [id], name: "userOrderItems")
  clinic            clinics     @relation(fields: [clinicId], references: [id])
  billItems         billItems[]
}

model cancelReasonOfItem {
  id             String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  cancelReasonId String?  @db.Uuid
  orderItemId    String
  description    String?
  createdAt      DateTime @default(now()) @db.Timestamptz(6)
  creatorId      String?  @db.Uuid
}

model couponApplyOrderItem {
  orderItemId String
  couponId    String   @db.Uuid
  createdAt   DateTime @default(now()) @db.Timestamptz(6)

  @@id([orderItemId, couponId])
}

model bills {
  id                  String   @id
  paymentMethodId     String   @db.Uuid
  clinicId            String   @db.Uuid
  totalPrice          Int //Tổng giá tiền của lần thanh toán
  totalCurrentReceipt Int //Tổng giá tiền khách chi trả hiện tại
  totalAmountPaid     Int // Tổng giá tiền khách trả trước đóÏ
  totalDiscount       Int
  recordingDate       DateTime @default(now()) @db.Timestamptz(6)
  exportInvoiceDate   DateTime @default(now()) @db.Timestamptz(6)
  creatorId           String   @db.Uuid
  userId              String   @db.Uuid
  notes               String?
  numberPrinted       Int      @default(0)
  createdAt           DateTime @default(now()) @db.Timestamptz(6)

  clinic        clinics       @relation(fields: [clinicId], references: [id], name: "clinicBill")
  creator       staffs        @relation(fields: [creatorId], references: [id], name: "creatorBill")
  user          users         @relation(fields: [userId], references: [id], name: "userBill")
  paymentMethod paymentMethod @relation(fields: [paymentMethodId], references: [id], name: "paymentMethodBill")
  billItems     billItems[]
}

model billItems {
  id            String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  billId        String
  total         Int
  discount      Int
  paid          Int
  debt          Int
  quantity      Int
  orderItemName String
  orderItemId   String
  createdAt     DateTime   @default(now()) @db.Timestamptz(6)
  bill          bills      @relation(fields: [billId], references: [id])
  orderItem     orderItems @relation(fields: [orderItemId], references: [id])
}

model bookings {
  id              String            @id @unique
  userId          String            @db.Uuid
  bookingType     bookingType
  doctorId        String?           @db.Uuid
  technicianId    String?           @db.Uuid
  clinicId        String            @db.Uuid
  appointmentDate DateTime          @default(now()) @db.Timestamptz(6)
  creatorId       String            @db.Uuid
  sellerOnlineId  String?           @db.Uuid
  sellerOfflineId String?           @db.Uuid
  salesSupportId  String?           @db.Uuid
  notes           String?
  checkinTime     DateTime?
  leftTime        DateTime?
  bookingStatus   bookingStatus     @default(NO_SHOW)
  isCancel        Boolean           @default(false)
  leftReasonId    String?           @db.Uuid
  leftNotes       String?
  cancelReasonId  String?           @db.Uuid
  createdAt       DateTime          @default(now()) @db.Timestamptz(6)
  leftReason      leftReason?       @relation(fields: [leftReasonId], references: [id])
  creator         staffs            @relation(fields: [creatorId], references: [id], name: "creatorBooking")
  doctor          staffs?           @relation(fields: [doctorId], references: [id], name: "doctorBooking")
  technician      staffs?           @relation(fields: [technicianId], references: [id], name: "technicianBooking")
  clinic          clinics?          @relation(fields: [clinicId], references: [id])
  cancelReason    cancelReason?     @relation(fields: [cancelReasonId], references: [id])
  bookingServices bookingServices[]
}

model bookingServices {
  bookingId String
  serviceId String    @db.Uuid
  booking   bookings? @relation(fields: [bookingId], references: [id])
  service   services? @relation(fields: [serviceId], references: [id])

  @@id([bookingId, serviceId])
}

model cancelReason {
  id        String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name      String
  active    active     @default(ACTIVE)
  createdAt DateTime   @default(now()) @db.Timestamptz(6)
  bookings  bookings[]
}

model leftReason {
  id          String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String
  description String?
  active      active     @default(ACTIVE)
  creatorId   String     @db.Uuid
  createdAt   DateTime   @default(now()) @db.Timestamptz(6)
  bookings    bookings[]
}

model categories {
  id          String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String
  description String?
  active      active      @default(ACTIVE)
  categoryTag categoryTag
  createdAt   DateTime    @default(now()) @db.Timestamptz(6)
  services    services[]
}

model services {
  id                  String                @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                String
  customId            String?
  priceFrom           Int
  priceTo             Int
  unit                String
  description         String?
  serviceTag          serviceTag
  active              active                @default(ACTIVE)
  categoryId          String                @db.Uuid
  createdAt           DateTime              @default(now()) @db.Timestamptz(6)
  bookingServices     bookingServices[]
  category            categories            @relation(fields: [categoryId], references: [id])
  couponApplyServices couponApplyServices[]
  serviceGifts        serviceGifts[]
  serviceApplyClinic  serviceApplyClinic[]
  orderItems          orderItems[]          @relation(name: "serviceOrderItem")
}

model serviceGifts {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  customId  String
  quantity  Int      @default(1)
  serviceId String   @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  services  services @relation(fields: [serviceId], references: [id])
}

model serviceApplyClinic {
  serviceId String   @db.Uuid
  clinicId  String   @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  service   services @relation(fields: [serviceId], references: [id])
  clinic    clinics  @relation(fields: [clinicId], references: [id])

  @@id([serviceId, clinicId])
}

model giftApplyClinics {
  serviceGiftId String   @db.Uuid
  serviceId     String   @db.Uuid
  createdAt     DateTime @default(now()) @db.Timestamptz(6)

  @@id([serviceGiftId, serviceId])
}

model combo {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name      String
  unit      String
  creatorId String   @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz(6)
}

model coupons {
  id                   String                @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                 String
  code                 String
  fromDate             DateTime
  toDate               DateTime
  issueQuantity        Int
  numberOfUses         Int
  active               active                @default(ACTIVE)
  createdAt            DateTime              @default(now()) @db.Timestamptz(6)
  couponApplyAtClinics couponApplyAtClinic[]
  couponApplyServices  couponApplyServices[]
}

model couponApplyAtClinic {
  couponId  String   @db.Uuid
  clinicId  String   @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  coupon    coupons  @relation(fields: [couponId], references: [id])
  clinic    clinics  @relation(fields: [clinicId], references: [id])

  @@id([couponId, clinicId])
}

model couponApplyServices {
  couponId  String   @db.Uuid
  serviceId String   @db.Uuid
  cash      Int      @default(0)
  percent   Int      @default(0)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  coupon    coupons  @relation(fields: [couponId], references: [id])
  service   services @relation(fields: [serviceId], references: [id])

  @@id([couponId, serviceId])
}

model provinces {
  id            Int      @id @default(autoincrement())
  province_code Int
  province_name String
  districts     Json
  created_at    DateTime @default(now()) @db.Timestamptz(6)
}

model paymentMethod {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name      String
  active    active   @default(ACTIVE)
  sorting   Int?
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  bills     bills[]  @relation(name: "paymentMethodBill")
}
