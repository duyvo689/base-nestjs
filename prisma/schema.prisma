generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum active {
  ACTIVE
  INACTIVE
  DELETE
  PENDING
}

enum actionFunctionLog {
  READ
  UPDATE
  CREATE
  DELETE
}

enum functionNameLog {
  USER
  ORDER
}

enum bookingStatus {
  NO_SHOW
  CHECK_IN
  UNDER_TREATMENT
  LEFT
}

model users {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  customId  String   @unique
  email     String?  @unique
  name      String
  nickname  String?
  phone     String?  @unique
  phone2    String?
  avatar    String?
  rankId    String   @db.Uuid
  creatorId String?  @db.Uuid
  active    active   @default(ACTIVE)
  createdAt DateTime @default(now()) @db.Timestamptz(6)

  rank ranks @relation(fields: [rankId], references: [id])
}

model userAttributes {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name      String   @db.Uuid
  display   String
  type      String
  createdAt DateTime @default(now()) @db.Timestamptz(6)
}

model userValues {
  userId          String   @db.Uuid
  userAttributeId String   @db.Uuid
  value           String
  createdAt       DateTime @default(now()) @db.Timestamptz(6)

  @@id([userId, userAttributeId])
}

model ranks {
  id            String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt     DateTime @default(now()) @db.Timestamptz(6)
  active        active   @default(ACTIVE)
  expenseAmount Int
  convertPoints Int
  description   String?
  maxPoints     Int
  minPoints     Int
  name          String
  hexColor      String?
  users         users[]
}

model staffs {
  id             String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  customId       String?       @unique
  email          String?       @unique
  name           String
  phone          String?       @unique
  phone2         String?       @unique
  avatar         String?
  roleId         String?       @db.Uuid
  hashedPassword String?
  birthday       DateTime?
  active         active        @default(PENDING)
  createdAt      DateTime      @default(now()) @db.Timestamptz(6)
  bookings       bookings[]
  role           roles?        @relation(fields: [roleId], references: [id])
  staffClinices  staffClinic[]
}

model permissions {
  id              String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  shortName       String           @unique
  displayName     String
  createdAt       DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  rolePermissions rolePermission[]
}

model pathProjects {
  id               String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  pageName         String
  path             String
  createdAt        DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  rolePermissions  rolePermission[]
  rolePathProjects rolePathProject[]
}

model roles {
  id              String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  displayName     String
  shortName       String
  active          active            @default(ACTIVE)
  createdAt       DateTime          @default(now()) @db.Timestamptz(6)
  staffs          staffs[]
  rolePermission  rolePermission[]
  rolePathProject rolePathProject[]
}

model rolePermission {
  roleId         String        @db.Uuid
  permissionId   String        @db.Uuid
  createdAt      DateTime      @default(now()) @db.Timestamptz(6)
  role           roles         @relation(fields: [roleId], references: [id])
  permission     permissions   @relation(fields: [permissionId], references: [id])
  pathProjects   pathProjects? @relation(fields: [pathProjectsId], references: [id])
  pathProjectsId String?       @db.Uuid

  @@id([roleId, permissionId])
}

model rolePathProject {
  roleId        String       @db.Uuid
  pathProjectId String       @db.Uuid
  createdAt     DateTime     @default(now()) @db.Timestamptz(6)
  role          roles        @relation(fields: [roleId], references: [id])
  pathProject   pathProjects @relation(fields: [pathProjectId], references: [id])

  @@id([roleId, pathProjectId])
}

model staffClinic {
  staffId   String   @db.Uuid
  clinicId  String   @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  clinic    clinics  @relation(fields: [clinicId], references: [id])
  staff     staffs   @relation(fields: [staffId], references: [id])

  @@id([staffId, clinicId])
}

model userClinic {
  userId    String   @db.Uuid
  clinicId  String   @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz(6)

  @@id([userId, clinicId])
}

model clinics {
  id          String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String
  shortName   String
  address     String?
  hotline     String?
  city        String?
  latitude    Float?
  longitude   Float?
  avatar      String?
  active      active        @default(ACTIVE)
  createdAt   DateTime      @default(now()) @db.Timestamptz(6)
  staffClinic staffClinic[]
}

model advertises {
  id          String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String
  active      active        @default(ACTIVE)
  createdAt   DateTime      @default(now()) @db.Timestamptz(6)
}

model marketingTeams {
  id          String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String
  active      active        @default(ACTIVE)
  createdAt   DateTime      @default(now()) @db.Timestamptz(6)
}

model functionLogs {
  id           Int               @id @default(autoincrement())
  staffId      String            @db.Uuid
  recordId     String            @db.Uuid
  staffName    String
  functionName functionNameLog?
  action       actionFunctionLog
  description  String?
  createdAt    DateTime          @default(now()) @db.Timestamptz(6)
}

model orders {
  id String @id @unique

  creatorId String   @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz(6)
}

model orderItems {
  id           String   @id @unique
  orderId      String
  name         String
  price        Int
  discount     Int
  quantity     Int
  customerPaid Int
  creatorId    String   @db.Uuid
  createdAt    DateTime @default(now()) @db.Timestamptz(6)
}

model orderServices {
  id          String   @id @unique
  orderItemId String
  serviceId   String
  serviceName String
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
}

model bookings {
  id              String            @id @unique
  userId          String            @db.Uuid
  doctorId        String            @db.Uuid
  technicianId    String            @db.Uuid
  dateFrom        DateTime
  dateTo          DateTime
  creatorId       String            @db.Uuid
  notes           String?
  checkinTime     DateTime?
  leftTime        DateTime?
  treatmentTime   DateTime?
  bookingStatus   bookingStatus     @default(NO_SHOW)
  isCancel        Boolean           @default(false)
  leftReasonId    String?           @db.Uuid
  leftNotes       String?
  cancelReasonId  String?           @db.Uuid
  createdAt       DateTime          @default(now()) @db.Timestamptz(6)
  leftReason      leftReason?       @relation(fields: [leftReasonId], references: [id])
  staff           staffs?           @relation(fields: [creatorId], references: [id])
  cancelReason    cancelReason?     @relation(fields: [cancelReasonId], references: [id])
  bookingServices bookingServices[]
}

model bookingServices {
  bookingId   String
  serviceId   String
  serviceName String
  booking     bookings? @relation(fields: [bookingId], references: [id])
  service     services? @relation(fields: [serviceId], references: [id])

  @@id([bookingId, serviceId])
}

model cancelReason {
  id          String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String
  description String?
  active      active     @default(ACTIVE)
  creatorId   String     @db.Uuid
  createdAt   DateTime   @default(now()) @db.Timestamptz(6)
  bookings    bookings[]
}

model leftReason {
  id          String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String
  description String?
  active      active     @default(ACTIVE)
  creatorId   String     @db.Uuid
  createdAt   DateTime   @default(now()) @db.Timestamptz(6)
  bookings    bookings[]
}

model services {
  id              String            @id @unique
  name            String
  frPrice         Int
  toPrice         Int
  unit            String
  description     String?
  categoryId      String            @db.Uuid
  creatorId       String            @db.Uuid
  createdAt       DateTime          @default(now()) @db.Timestamptz(6)
  bookingServices bookingServices[]
}

model combo {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name      String
  unit      String
  creatorId String   @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz(6)
}

model categories {
  id          String   @id @unique
  name        String
  description String?
  categoryId  String   @db.Uuid
  creatorId   String   @db.Uuid
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
}
